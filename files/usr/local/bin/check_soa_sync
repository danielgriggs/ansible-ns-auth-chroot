#!/usr/bin/perl -w
#
# Copyright (C) 1998 David Eckelkamp
#           (C) 2005 Ondrej Sury
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

require 5.004;
use POSIX;
use strict;
use Getopt::Long;
use English;
use File::Basename;
use Net::DNS::Resolver;
use Net::DNS::Packet;
use Net::DNS::RR;

use lib "/usr/lib/nagios/plugins";
use utils qw($TIMEOUT %ERRORS &print_revision &support);

my $PROGNAME="check_soa_sync";

sub print_help();
sub print_usage();

$ENV{'PATH'}='';
$ENV{'BASH_ENV'}='';
$ENV{'ENV'}='';

my $version      = 0;
my $help         = 0;
my $debug        = 0;
my $retries      = 1;
my $zone         = 0;
my $remote       = [];
my $remote_port  = 53;
my $timeout      = 1;
my $host         = undef;
my $host_port    = 53;
my $slack        = 10;

Getopt::Long::Configure('bundling');
GetOptions
	("V"    => \$version, "version"     => \$version,
	 "h"    => \$help,    "help"        => \$help,
	 "v"    => \$debug,   "verbose"     => \$debug,
	 "r=i"  => \$retries, "retries=i"   => \$retries,
	 "z=s"  => \$zone,    "zone=s"      => \$zone,
	 "f=s@" => \$remote,  "remote=s@"   => \$remote,
	 "s=i"  => \$slack,   "slack=i"     => \$slack,
	 "t=i"  => \$timeout, "timeout=i"   => \$timeout,
	 "H=s"  => \$host,    "hostname=s"  => \$host);

if ($version) {
    print_revision($PROGNAME,'$Revision: 0.01 $ ');
    exit $ERRORS{'OK'};
}

if ($help) {
    print_help();
    exit $ERRORS{'UNKNOWN'};
}

unless ($host) {
    print "No target host specified\n";
    print_usage();
    exit $ERRORS{'UNKNOWN'};
}

unless ($remote) {
    print "No remote target host specified\n";
    print_usage();
    exit $ERRORS{'UNKNOWN'};
}

if ( $host =~ m/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ ) {
    # host port remains 53
} elsif ( $host =~ m/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d{1,5}$/ ) {
    ($host,$host_port) = $host =~ m/^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d{1,5})$/;
} else {
    print "Host format not recognised $host should be like 1.1.1.1 or 1.1.1.1:34\n";
    exit $ERRORS{'CRITICAL'};
}

my $remote_hosts = verify_remote_hosts($remote);

$timeout = 1 unless $timeout =~ m/^\d*$/;
$retries = 2 unless $retries =~ m/^\d*$/;;

unless ($zone) {
    print "No zone specified\n";
    print_usage();
    exit $ERRORS{'UNKNOWN'};
}


my $remote_results = get_greatest_soa($remote_hosts);

my ($local_serial, $res,$soa_req);
$res = new Net::DNS::Resolver;
$res->defnames(0);
$res->recurse(0);
$res->port($host_port);
$res->retry($retries);
$res->udp_timeout($timeout);
$res->nameservers($host);

$soa_req = $res->query($zone, "SOA");

if (!defined($soa_req) || ($soa_req->header->ancount <= 0)) {
    print "SOA query for $zone from $host failed (" . $res->errorstring . ")\n";
    exit $ERRORS{'CRITICAL'};
}

unless ($soa_req->header->aa) {
    print "$host in not authoritative for $zone\n";
    exit $ERRORS{'CRITICAL'};
}

unless ($soa_req->header->ancount == 1) {
    print "Too many answers for SOA query from $host for $zone\n";
    exit $ERRORS{'CRITICAL'};
}

unless (($soa_req->answer)[0]->type eq "SOA") {
    print "Query for SOA for $zone from $host failed: return type = ". ($soa_req->answer)[0]->type . "\n";
    exit $ERRORS{'CRITICAL'};
}
$local_serial = ($soa_req->answer)[0]->serial;

my $remote_serial = $remote_results->{'soa'};

unless ( $local_serial == $remote_serial ) {
    my $diff = $local_serial - $remote_serial;
    if ( $diff < 0 ) {
	print "Serial is ahead on remote: is $remote_serial, mine is $local_serial";
    } else {
	print "Serial is behind on remote: is $remote_serial, mine is $local_serial";
    }
    print "| Serial=" . $remote_serial . "c Diff=" . $diff . " Seen=" . $remote_results->{'ok'} . "\n";
    if ( $diff < 0 - $slack || $diff > $slack ) {
	# If outside the slack values.
	exit $ERRORS{'CRITICAL'};
    } else {
	# If within the slack values.
	exit $ERRORS{'WARNING'};
    }
}

print "Serial for $zone: $remote_serial";
print "| Serial=" . $remote_serial . "c Diff=0 Seen=" . $remote_results->{'ok'} . "\n";
exit $ERRORS{"OK"};

#### subs

sub print_usage () {
	print "Usage: $PROGNAME -H <host>[:port] [-r <retries>] -f <remote>[:port] -z <zone> [ -s slack] [-v verbose]\n";
}

sub print_help () {
	print_revision($PROGNAME,'$Revision: 0.01 $');
	print "En-bettered by Daniel Griggs\n";
	print "\n";
	print_usage();
	support();
}

sub verify_remote_hosts {
    my $hosts = shift;
    my $rh = (); # Remote Hosts

    foreach my $remote ( @{$hosts} ) {
	if ( $remote =~ m/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ ) {
	    # remote port is the default 53
	    push @{$rh}, { host => $remote, port => 53 }
	} elsif ( $remote =~ m/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d{1,5}$/ ) {
	    my ($ip,$port) = $remote =~ m/^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d{1,5})$/;
	    push @{$rh}, { host => $ip, port => $port }

	} else {
	    print "Host format not recognised $remote should be liek 1.1.1.1 or 1.1.1.1:34\n";
	    exit $ERRORS{'CRITICAL'};
	}
    }
    return $rh

}

sub get_greatest_soa {
    my $srvs = shift;
    my $results;

    foreach my $srv ( @{$srvs} ) {
	$debug && print "checking host $srv->{'host'} for an SOA\n";
	my $result = get_remote_soa($srv);
	if ( exists $result->{'error'} ) {
	    $results->{'errors'} = $srv->{'host'} . ": " . $result->{'error'} . "\n";
	} else {
	    if ( exists $results->{'soa'} && $results->{'soa'} < $result->{'soa'} ) {
		$results->{'soa'} = $result->{'soa'};
		$debug && print "New higher SOA, now " . $result->{'soa'} . "\n";
	    } elsif ( ! exists $results->{'soa'} ) {
		$results->{'soa'} = $result->{'soa'};
		$debug && print "First SOA " . $result->{'soa'} . "\n";
	    } else {
		$debug && print "SOA not higher " . $result->{'soa'} . "\n";
	    }
	    $results->{'ok'}++;
	}

    }

    if ( ! exists $results->{'soa'} ) {
	print $results->{'errors'};
	exit $ERRORS{'CRITICAL'};
    }

    return $results;
}

sub get_remote_soa {
    my $dns_srv = shift;
    my $result;

    my ($res, $soa_req, $remote_serial);
    $res = new Net::DNS::Resolver;
    $res->defnames(0);
    $res->recurse(0);
    $res->port($dns_srv->{'port'});
    $res->retry($retries);
    $res->udp_timeout($timeout);
    $res->nameservers($dns_srv->{'host'});
    $soa_req = $res->query($zone, "SOA");
    
    if (!defined($soa_req) || ($soa_req->header->ancount <= 0)) {
	$result->{'error'} = "SOA query for $zone to " . $dns_srv->{'host'} . " failed (" . $res->errorstring . ")\n";
	return $result;
    }

    unless ($soa_req->header->aa) {
	$result->{'error'} = $dns_srv->{'host'} . " in not authoritative for $zone\n";
	return $result;
    }

    unless ($soa_req->header->ancount == 1) {
	$result->{'error'} = "Too many answers for SOA query from " . $dns_srv->{'host'} . " for $zone\n";
	return $result;
    }

    unless (($soa_req->answer)[0]->type eq "SOA") {
	$result->{'error'} = "Query for SOA for $zone to " . $dns_srv->{'host'} . " failed: return type = ". ($soa_req->answer)[0]->type . "\n";
	return $result;
    }

    $result->{'soa'} = ($soa_req->answer)[0]->serial;
    return $result;
}
